package binarycalculator;

import java.io.IOException;
import java.util.Map;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Servlet implementation class Calculator
 */
@WebServlet("/BinaryCalc")
public class BinaryCalc extends HttpServlet {
	private static final long serialVersionUID = 1L;
	double result;

	public BinaryCalc() {
		super();
		// TODO Auto-generated constructor stub
	}

	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub

	}

	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {

		String valueString = request.getParameter("value");
		String resultString = request.getParameter("result");

		String result = "";
		if (!resultString.isEmpty()) {
			result = resultString;
		}

		if (!valueString.isEmpty()) {

			String value = valueString;

			Map parameters = request.getParameterMap();
			if (parameters.containsKey("plus")) {
				result = value;
				request.setAttribute("value", result);
				request.setAttribute("op", "plus");
			} else if (parameters.containsKey("minus")) {
				result = value;
				request.setAttribute("value", result);
				request.setAttribute("op", "minus");
			} else if (parameters.containsKey("and")) {
				result = value;
				request.setAttribute("value", result);
				request.setAttribute("op", "and");
			} else if (parameters.containsKey("or")) {
				result = value;
				request.setAttribute("value", result);
				request.setAttribute("op", "or");
			}else if (parameters.containsKey("xor")) {
				result = value;
				request.setAttribute("value", result);
				request.setAttribute("op", "xor");
			}else if (parameters.containsKey("ms")) {
				request.setAttribute("mems", request.getParameter("result"));
			}else if (parameters.containsKey("mr")) {
				request.setAttribute("value",  request.getParameter("mems"));
			}else if (parameters.containsKey("mc")) {
				request.setAttribute("mems", "");
			}else if (parameters.containsKey("c")) {
				request.setAttribute("value", "");
			}
			else if(parameters.containsKey("equal")){
				String operation =  request.getParameter("result");
				if(operation.equals("plus")){
					result = add(result,value);
					request.setAttribute("value", result);
				}else if(operation.equals("minus")){
					result = subtract(result,value);
					request.setAttribute("value", result);	
				}else if(operation.equals("and")){
					result = and_oper(result,value);
					request.setAttribute("value", result);
				}else if(operation.equals("or")){
					result = or_oper(result,value);
					request.setAttribute("value", result);
				}else if(operation.equals("xor")){
					result =xor_oper(result,value);
					request.setAttribute("value", result);
				}
			}
			RequestDispatcher view = request.getRequestDispatcher("/ShowAll.jsp");
			view.forward(request, response);

		}else {

			RequestDispatcher view = request.getRequestDispatcher("/ShowAll.jsp");
			view.forward(request, response);

		}
	}
	
	
	public String and_oper(String x,String y){
		int d1=Integer.parseInt(x, 2);//Converting Binary to Decimal
    	int d2=Integer.parseInt(y, 2);
    	int i = (d1 & d2);
    	String binaryAdd = Integer.toBinaryString(i);
    	return binaryAdd;
	}
	
	public String or_oper(String x,String y){
		int d1=Integer.parseInt(x, 2);//Converting Binary to Decimal
    	int d2=Integer.parseInt(y, 2);
    	int i = (d1 | d2);
    	String binaryAdd = Integer.toBinaryString(i);
    	return binaryAdd;
	}
	public String xor_oper(String x,String y){
		int d1=Integer.parseInt(x, 2);//Converting Binary to Decimal
    	int d2=Integer.parseInt(y, 2);
    	int i = (d1 ^ d2);
    	String binaryAdd = Integer.toBinaryString(i);
    	return binaryAdd;
	}
	public String[] lookupTable = {
        "0+0+0=00",
        "0+0+1=01",
        "0+1+0=01", 
        "0+1+1=10",
        "1+0+0=01",
        "1+0+1=10",
        "1+1+0=10",
        "1+1+1=11",
    };
    public String lookup(char b1, char b2, char c) {
        String formula = String.format("%c+%c+%c=", b1, b2, c);
        for (String s : lookupTable) {
            if (s.startsWith(formula)) {
                return s.substring(s.indexOf("=") + 1);
            }
        }
        throw new IllegalArgumentException();
    }
    public String zeroPad(String s, int length) {
        while (s.length() < length) {
            s = "0" + s;
        }
        return s;
    }   
    public String add(String s1, String s2) {
        int length = Math.max(s1.length(), s2.length());
        s1 = zeroPad(s1, length);
        s2 = zeroPad(s2, length);
        String result = "";
        char carry = '0';
        for (int i = length - 1; i >= 0; i--) {
            String columnResult = lookup(s1.charAt(i), s2.charAt(i), carry);
            result = columnResult.charAt(1) + result;
            carry = columnResult.charAt(0);
        }
        if (carry == '1') {
            result = carry + result;
        }
        return result;
    }
    
    public String subtract(String str1, String str2){
    	int d1=Integer.parseInt(str1, 2);//Converting Binary to Decimal
    	int d2=Integer.parseInt(str2, 2);
    	int i = (d1 - d2);
    	String binaryAdd = Integer.toBinaryString(i);
    	return binaryAdd;
    }

} 